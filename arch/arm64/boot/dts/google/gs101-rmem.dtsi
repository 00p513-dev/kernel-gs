// SPDX-License-Identifier: GPL-2.0-only
/*
 * GS101 SoC reserved memory
 *
 * Copyright 2019 Google LLC
 */

#include <dt-bindings/soc/google/debug-snapshot-def.h>

/ {

	ramoops {
		compatible = "ramoops";
		memory-region = <&ramoops_mem>;
		alt-memory-region = <&alt_ramoops_mem>;
		record-size = <0x20000>;
		console-size = <0x100000>;
		pmsg-size = <0x80000>;
	};

	access_ramoops@0 {
		compatible = "access_ramoops";
		label = "metadata";
		memory-region = <&ramoops_meta_mem>;
	};

	access_ramoops@1 {
		compatible = "access_ramoops";
		label = "ramoops";
		memory-region = <&alt_ramoops_mem>;
	};

	reserved_memory: reserved-memory {
		#address-cells = <2>;
		#size-cells = <1>;
		ranges;

		ect_binary: ect_binary {
			compatible = "exynos,ect_rmem";
			reg = <0x0 0x90000000 0x0003A000>;
		};

		tpu_fw_reserved: tpu_fw@0x90000000 {
			reg = <0x0 0x90000000 0x200000>;
			no-map;
		};

		gsa_reserved_protected: gsa@0x90200000 {
			reg = <0x0 0x90200000 0x400000>;
			no-map;

		};

		ramoops_mem: ramoops_region@fd3ff000 {
			reg = <0 0xfd3ff000 0x200000>;
			no-map;
		};

		alt_ramoops_mem: alt_ramoops_region@fd5ff000 {
			reg = <0 0xfd5ff000 0x200000>;
			no-map;
		};

		ramoops_meta_mem: ramoops_meta_region@fd7ff000 {
			reg = <0 0xfd7ff000 0x1000>;
			no-map;
		};

		cp_rmem: cp_rmem {
			compatible = "exynos,modem_if";
			reg = <0x0 0xF0000000 0x00800000>;
			rmem_index = <0>;
		};

		cp_msi_rmem: cp_msi_rmem {
			compatible = "exynos,modem_if";
			reg = <0x0 0xF6200000 0x00001000>;
			rmem_index = <1>;
		};

		cp_rmem_2: cp_rmem_2 {
			compatible = "exynos,modem_if";
			reg = <0x0 0xE8000000 0x08000000>;
			rmem_index = <2>;
		};

		debug_snapshot {
			#address-cells = <2>;
			#size-cells = <1>;

			header: header {
				reg = <0 DSS_HEADER_ADDR DSS_HEADER_SIZE>;
			};
			log_kevents: log_kevents {
				reg = <0 DSS_LOG_KEVENTS_ADDR
						DSS_LOG_KEVENTS_SIZE>;
			};
			log_s2d: log_s2d {
				reg = <0 DSS_LOG_S2D_ADDR DSS_LOG_S2D_SIZE>;
				no-map;
			};
			log_arrdumpreset: log_arrdumpreset {
				reg = <0 DSS_LOG_ARRAYRESET_ADDR
						DSS_LOG_ARRAYRESET_SIZE>;
				no-map;
			};
			log_arrdumppanic: log_arrdumppanic {
				reg = <0 DSS_LOG_ARRAYPANIC_ADDR
						DSS_LOG_ARRAYPANIC_SIZE>;
				no-map;
			};
		};
	};
};
